#!/usr/bin/env node

var s3blaster = require('../lib/s3blaster');
var yargs = require('yargs');
var usage = require('../lib/usage');
var listStream = require('../lib/list-stream');

// validates command line arguments
function validateArgs(argv, opts) {
  if (argv.help) return;

  var op = argv._[0];
  if (!op) {
    throw 'OPERATION is required';
  }

  var opCfg = usage.operations[op];
  if (argv._.length <= opCfg.required.length) {
    throw (op + ' operation requires ' + opCfg.required.join(', ') + ' parameters');
  }
}

// setup usage messages
function describeOperation(op) {
  return '  ' + op + ' ' +
    usage.operations[op].required.join(' ') + ' ' +
    usage.operations[op].optional.map(function (arg) {
      return '[' + arg + ']'
    }).join(' ') +
    '\n    ' + usage.operations[op].description;
}

var operationsUsage = Object.keys(usage.operations).map(function (op) {
  return describeOperation(op);
}).join('\n') + '\n';

var usageMsg = 'Usage: ' + usage.synopsis + '\n\n' + usage.description + '\n\n\nOperations:\n' + operationsUsage;

// setup yargs
yargs = yargs
  .usage(usageMsg)
  .options(usage.options)
  .check(validateArgs);

usage.examples.forEach(function (example) {
  yargs = yargs.example.apply(yargs, example);
});

var argv = yargs.argv;

// check for help option
if (argv.h) {
  yargs.showHelp();
  process.exit(0);
}

// switch on operation and run s3blaster
var op = argv._[0];

if (op === 'PUT') {
  var srcDir = argv._[1];
  var s3Bucket = argv._[2];
  var destPath = argv._[3] || '.';

  s3blaster.put(srcDir, s3Bucket, destPath, argv, function (err) {
    if (err) {
      console.error('Error putting from', srcDir, 'to', destPath, '-', err);
      process.exit(1);
    }
    console.log('Put from', srcDir, 'to', destPath, 'successfully');
    process.exit(0);
  });
} else if (op === 'GET') {
  var s3Bucket = argv._[1];
  var s3Key = argv._[2];
  var localPath =  argv._[3] || '.';

  s3blaster.get(s3Bucket, s3Key, localPath, argv, function (err) {
    if (err) {
      console.error('Error getting from bucket', s3Bucket, '-', s3Key, '-', err);
      process.exit(1);
    }
    console.log('Fetched from', s3Bucket, '-', s3Key, 'to', localPath, 'successfully');
    process.exit(0);
  });
} else if (op === 'LIST') {
  var s3Bucket = argv._[1];
  var prefix = argv._[2];

  var stream = s3blaster.list(s3Bucket, prefix, argv);
  stream.on('error', function (err) {
    console.error('Error listing bucket', s3Bucket, '-', prefix, '-', err);
    process.exit(1);
  });

  stream.on('end', process.exit);
  stream.pipe(listStream()).pipe(process.stdout);
} else if (op === 'DELETE') {
  var s3Bucket = argv._[1];
  var prefix = argv._[2];

  s3blaster.del(s3Bucket, prefix, argv, function (err, deleted) {
    if (err) {
      console.error('Error deleting from bucket', s3Bucket, '-', prefix, '-', err);
      process.exit(1);
    }
    console.log('Deleted', deleted, 'objects from', s3Bucket, '-', prefix);
    process.exit(0);
  });
} else if (op === 'COPY') {
  var srcBucket = argv._[1];
  var srcPrefix = argv._[2];
  var dstBucket = argv._[3];
  var dstPrefix = argv._[4] || '';

  debugger;
  s3blaster.copy(srcBucket, srcPrefix, dstBucket, dstPrefix, argv, function (err, copied) {
    if (err) {
      console.error('Error copying from bucket', srcBucket, '-', srcPrefix, '-', err);
      process.exit(1);
    }
    console.log('Copied', copied, 'objects from', srcBucket, '-', srcPrefix);
    process.exit(0);
  });
} else if (op === 'FIX_LINKS') {

}

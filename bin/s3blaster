#!/usr/bin/env node

var s3blaster = require('../lib/s3blaster');

var USAGE =
    's3blaster OPERATION [parameters] [options]\n' +
    '\n' +
    'Operations:\n' +
    '  PUT {local folder} {bucket} [destination folder]: recursively put local files and directories into S3. Destination folder is optional.\n' +
    '  GET {s3bucket} {s3key} [local folder]: recursively get folder and/or file from S3 and place in destination folder (defaults to current directory).\n' +
    '  LIST {s3bucket} [prefix]: List objects in S3 bucket starting with prefix, or all objects if no prefix.'

function validateArgs(argv, opts) {
  var op = argv._[0];
  var validOpts = ['PUT', 'GET', 'LIST'];

  if (!argv.h && !op) {
    throw 'OPERATION is required';
  }
  if (validOpts.indexOf(op) === -1) {
    throw "Invalid operation '" + op + "'. Valid operations are " + validOpts.join(', ');
  }
  if (op === 'PUT' && argv._.length < 3) {
    throw 'PUT operation requires folder and s3bucket parameters';
  }
  if (op === 'GET' && argv._.length < 3) {
    throw 'GET operation requires s3bucket and s3key parameters';
  }
  if (op === 'LIST' && argv._.length < 2) {
    throw 'LIST operation requires s3bucket parameter'
  }
}

var yargs = require('yargs')
    .usage(USAGE)
    .boolean('help')
    .describe('help', 'display this help message')
    .alias('help', 'h')
    .boolean('verbose')
    .describe('verbose', 'verbose mode')
    .alias('verbose', 'v')
    .boolean('dryrun')
    .describe('dryrun', 'print log messages but do not actually put or get from S3')
    .alias('dryrun', 'd')
    .example(
      's3blaster -v PUT folder s3bucket s3folder',
      'Recursively put all files and folders in local folder to s3bucket in s3folder, in verbose mode.')
    .check(validateArgs);

var argv = yargs.argv;

if (argv.h) {
  yargs.showHelp();
  process.exit(0);
}

if (argv.d) {
  argv.v = true; // always be verbose in dry run mode
}

var op = argv._[0];

if (op === 'PUT') {
  var srcDir = argv._[1];
  var s3Bucket = argv._[2];
  var destPath = argv._[3] || '.';

  s3blaster.put(srcDir, s3Bucket, destPath, argv, function (err) {
    if (err) {
      console.error('Error putting from', srcDir, 'to', destPath, '-', err);
      process.exit(1);
    }
    console.log('Copied from', srcDir, 'to', destPath, 'successfully');
    if (argv.d) {
      console.log("(dry run mode - didn't really upload)");
    }
  });
} else if (op === 'GET') {
  var s3Bucket = argv._[1];
  var s3Key = argv._[2];
  var localPath =  argv._[3] || '.';

  s3blaster.get(s3Bucket, s3Key, localPath, argv, function (err) {
    if (err) {
      console.error('Error getting from bucket', s3Bucket, '-', s3Key, '-', err);
      process.exit(1);
    }
    console.log('Fetched from', s3Bucket, '-', s3Key, 'to', localPath, 'successfully');
    if (argv.d) {
      console.log("(dry run mode - didn't really upload)");
    }
    process.exit(0);
  });
} else if (op === 'LIST') {
  var s3Bucket = argv._[1];
  var prefix = argv._[2];

  s3blaster.list(s3Bucket, prefix, argv, function (err, results) {
    process.exit(0);
  });
}
